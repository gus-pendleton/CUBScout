var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CUBScout","category":"page"},{"location":"#CUBScout","page":"Home","title":"CUBScout","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CUBScout.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CUBScout]","category":"page"},{"location":"#CUBScout.example_data_path","page":"Home","title":"CUBScout.example_data_path","text":"example_data_path\n\nThe path to an example dataset, stored as an artifact within the package. This is an .fna file containing coding sequences from Bacillus subtilis subsp. subtilis str. 168, NCBI Accession # NC_000964.3.\n\n\n\n\n\n","category":"constant"},{"location":"#CUBScout.codon_dict","page":"Home","title":"CUBScout.codon_dict","text":"codon_dict\n\nThe codon_dict type defines how codons are translated, and is essential for calculating codon usage bias as it identifies stop codons and each amino acid's degeneracy. A default codon dictionary is provided (default_codon_dict), or a user can make their own using the make_codon_dict function.\n\nFields\n\ncodons: the 64 codons, in alphabetical order\nAA: corresponding amino acid for each codon (64 entries long)\nAA_nostops: same as AA, but with stop codons removed\nuniqueAA: unique amino acid names including stop codons. Under a standard translation table, this is 21 amino acids long\nuniqueAA: same as uniqueAA, but with stop codons removed\nuniqueI: a vector of the same length as uniqueAA, containing vectors of the indices of each codon for that amino acid. For instance, the first entry corresponds to Lysine, and contains the vector [1, 3], corresponding to the positions of codons AAA and AAG in the codons field\nuniqueI_nostops: same as uniqueI, but with stop codons removed\ndeg: a vector of the same length as uniqueAA, containing the degeneracy for each amino acid.\ndeg_nostops: same as deg, but with stop codons removed\nstop_mask: a Boolean vector of length 64 which is false for stop codons. This is used to remove stop codons when calculating codon usage bias.\n\nNotes\n\nGenerally, CUBScout users shouldn't need to interact with the codon_dict type, as the standard genetic code is applied by default. Details for constructing a custom codon_dict are documented under the make_codon_dict function.\n\n\n\n\n\n","category":"type"},{"location":"#CUBScout.all_cub","page":"Home","title":"CUBScout.all_cub","text":"all_cub(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nall_cub(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate all codon usage bias measures at once. Because many measures require the same initial calculations, this is more efficient than calculating them individually.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> all_cub_results = all_cub(example_data_path); # Calculate all six codon usage measures on example dataset\n\njulia> all_cub(example_data_path, dataframe = true); # Get output in dataframe format\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> all_cub(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true); # Calculate all measures using ribosomal genes as a reference subset\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.b","page":"Home","title":"CUBScout.b","text":"b(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nb(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate B from Karlin and Mrazek, 1996. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = b(example_data_path); # Calculate measure on example dataset\n\njulia> result_300 = b(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> round.(result.self[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.209127\n 0.328976\n 0.223653\n 0.539114\n 0.249196\n\njulia> b(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> b(example_data_path, rm_start = true); # Remove start codons\n\njulia> b(example_data_path, dataframe = true); # Get output in dataframe format\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> b(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true); # Calculate using ribosomal genes as a reference subset\n\njulia> b(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true); # Calculate using all genes and ribosomal genes as a reference subset\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.cai","page":"Home","title":"CUBScout.cai","text":"cai(filepath::String, ref_vector::Vector{Bool}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\ncai(filepaths::Vector{String}, ref_vectors::Vector{Vector{Bool}}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate CAI from Sharp and Lee, 1987.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nref_vector: reference subset, which is required for cai. Bool[] the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. If providing multiple filepaths and want custom reference sets, ref_vectors should be a vector of vectors corresponding to the vector of filepaths.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors. Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> result = cai(example_data_path, ribosomal_genes); # Calculate CAI on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.844967\n 0.88548\n 0.817348\n 1.072675\n 0.834179\n\njulia> cai(example_data_path, ribosomal_genes, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> cai(example_data_path, ribosomal_genes, rm_start = true); # Remove start codons\n\njulia> cai(example_data_path, ribosomal_genes, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.e","page":"Home","title":"CUBScout.e","text":"e(filepath::String, ref_vector::Vector{Bool}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\ne(filepaths::Vector{String}, ref_vectors::Vector{Vector{Bool}}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate E from Karlin and Mrazek, 1996.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nref_vector: reference subset, which is required for e. Bool[] the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. If providing multiple filepaths and want custom reference sets, ref_vectors should be a vector of vectors corresponding to the vector of filepaths.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors. Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> result = e(example_data_path, ribosomal_genes); # Calculate E on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.762317\n 1.025839\n 0.875954\n 0.986498\n 1.111275\n\njulia> e(example_data_path, ribosomal_genes, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> e(example_data_path, ribosomal_genes, rm_start = true); # Remove start codons\n\njulia> e(example_data_path, ribosomal_genes, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.enc","page":"Home","title":"CUBScout.enc","text":"enc(filepath::String, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nenc(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate ENC from Wright, 1990. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = enc(example_data_path); # Run ENC on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 56.787282\n 52.725947\n 59.287949\n 52.296686\n 55.262981\n\njulia> result_300 = enc(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result)\n3801\n\njulia> length(result_300)\n1650\n\njulia> enc(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> enc(example_data_path, rm_start = true); # Remove start codons\n\njulia> enc(example_data_path, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.enc_p","page":"Home","title":"CUBScout.enc_p","text":"enc_p(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nenc_p(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate ENC' from Novembre, 2002.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = enc_p(example_data_path); # Calculate measure on example dataset\n\njulia> result_300 = enc_p(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> round.(result.self[1:5], digits = 6)\n5-element Vector{Float64}:\n 61.0\n 59.369798\n 60.749462\n 61.0\n 61.0\n\njulia> enc_p(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> enc_p(example_data_path, rm_start = true); # Remove start codons\n\njulia> enc_p(example_data_path, dataframe = true); # Get output in dataframe format\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> enc_p(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true); # Calculate using ribosomal genes as a reference subset\n\njulia> enc_p(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true); # Calculate using all genes and ribosomal genes as a reference subset\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.find_seqs-Tuple{AbstractString, Regex}","page":"Home","title":"CUBScout.find_seqs","text":"find_seqs(path::AbstractString, match_pattern::Regex)\n\nRead a fasta file at path and query the description field for a given Regex match_pattern. These results can be supplied in either the reference tuples (for codon usage bias functions) or reference vectors (for expressivity measures).\n\nExamples\n\njldoctest julia> find_seqs(example_data_path, r\"ribosomal\")[1:5] 5-element Vector{Bool}:  0  0  0  0  0\n\n\n\n\n\n","category":"method"},{"location":"#CUBScout.fop","page":"Home","title":"CUBScout.fop","text":"fop(filepath::String, ref_vector::Vector{Bool}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nfop(filepaths::Vector{String}, ref_vectors::Vector{Vector{Bool}}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate FOP from Ikemura, 1981.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nref_vector: reference subset, which is required for fop. Bool[] the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. If providing multiple filepaths and want custom reference sets, ref_vectors should be a vector of vectors corresponding to the vector of filepaths.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors. Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> result = fop(example_data_path, ribosomal_genes); # Calculate CAI on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.567816\n 0.566845\n 0.509695\n 0.725\n 0.653784\n\njulia> fop(example_data_path, ribosomal_genes, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> fop(example_data_path, ribosomal_genes, rm_start = true); # Remove start codons\n\njulia> fop(example_data_path, ribosomal_genes, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.gcb","page":"Home","title":"CUBScout.gcb","text":"gcb(filepath::String, dict::codon_dict = default_codon_dict; ref_vector = [], perc = 0.05, rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\ngcb(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_vector = [], perc = 0.05, rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate GCB from Merkl, 2003.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_vector: optional reference subset; by default gcb begins calculations using all genes as a seed. If you want to provide a custom reference set, it should be a vector Bool[] the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. If providing multiple filepaths and want custom reference sets, ref_vectors should be a vector of vectors corresponding to the vector of filepaths.\nperc: percentage of \"top hits\" which should be used as a reference set in the next iteration. By default set to 0.05. \nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors. Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> result = gcb(example_data_path); # Calculate GCB on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n -0.058765\n -0.08659\n -0.005496\n -0.065659\n -0.032062\n\njulia> ribo_result = gcb(example_data_path, ref_vector = ribosomal_genes); # Calculate GCB with ribosomal genes as reference seed example dataset\n\njulia> round.(ribo_result[1:5], digits = 6)\n5-element Vector{Float64}:\n -0.135615\n -0.036687\n -0.169136\n -0.186104\n -0.01653\n\njulia> fop(example_data_path, ribosomal_genes, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> fop(example_data_path, ribosomal_genes, rm_start = true); # Remove start codons\n\njulia> fop(example_data_path, ribosomal_genes, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.make_codon_dict","page":"Home","title":"CUBScout.make_codon_dict","text":"make_codon_dict(filepath::AbstractString, delimiter::AbstractChar = '\t')\n\nMake a custom codon dictionary for organisms with non-standard genetic code. filepath points to a delimited file with two columns and no header. the first column should be codons, and the second column their corresponding amino acid. Avoid spaces and special characters (e.g., write GlutamicAcid instead of Glutamic Acid). Stop codons can be coded as Stop, stop, STOP, or *. If delimited using any character outside of tab, supply the delimiter as the second argument as Char, not a string (e.g. ',' not \",\"). make_codon_dict uses readdlm from DelimitedFiles; it's a good idea to check whether readdlm parses your file correctly before passing to make_codon_dict\n\nExamples\n\njulia> my_codon_dict = make_codon_dict(CUBScout.codon_dict_path)\ncodon_dict(BioSequences.LongSequence{BioSequences.DNAAlphabet{2}}[AAA, AAC, AAG, AAT, ACA, ACC, ACG, ACT, AGA, AGC  …  TCG, TCT, TGA, TGC, TGG, TGT, TTA, TTC, TTG, TTT], [\"Lysine\", \"Asparagine\", \"Lysine\", \"Asparagine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Arginine\", \"Serine\"  …  \"Serine\", \"Serine\", \"Stop\", \"Cysteine\", \"Tryptophan\", \"Cysteine\", \"Leucine\", \"Phenylalanine\", \"Leucine\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Lysine\", \"Asparagine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Arginine\", \"Serine\"  …  \"Serine\", \"Serine\", \"Serine\", \"Cysteine\", \"Tryptophan\", \"Cysteine\", \"Leucine\", \"Phenylalanine\", \"Leucine\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Threonine\", \"Arginine\", \"Serine\", \"Isoleucine\", \"Methionine\", \"Glutamine\", \"Histidine\", \"Proline\"  …  \"Glutamicacid\", \"Asparticacid\", \"Alanine\", \"Glycine\", \"Valine\", \"Stop\", \"Tyrosine\", \"Cysteine\", \"Tryptophan\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Threonine\", \"Arginine\", \"Serine\", \"Isoleucine\", \"Methionine\", \"Glutamine\", \"Histidine\", \"Proline\", \"Leucine\", \"Glutamicacid\", \"Asparticacid\", \"Alanine\", \"Glycine\", \"Valine\", \"Tyrosine\", \"Cysteine\", \"Tryptophan\", \"Phenylalanine\"], Vector{Int32}[[1, 3], [2, 4], [5, 6, 7, 8], [9, 11, 25, 26, 27, 28], [10, 12, 53, 54, 55, 56], [13, 14, 16], [15], [17, 19], [18, 20], [21, 22, 23, 24]  …  [33, 35], [34, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 51, 57], [50, 52], [58, 60], [59], [62, 64]], Vector{Int32}[[1, 3], [2, 4], [5, 6, 7, 8], [9, 11, 25, 26, 27, 28], [10, 12, 51, 52, 53, 54], [13, 14, 16], [15], [17, 19], [18, 20], [21, 22, 23, 24], [29, 30, 31, 32, 58, 60], [33, 35], [34, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50], [55, 57], [56], [59, 61]], Int32[2, 2, 4, 6, 6, 3, 1, 2, 2, 4  …  2, 2, 4, 4, 4, 3, 2, 2, 1, 2], Int32[2, 2, 4, 6, 6, 3, 1, 2, 2, 4, 6, 2, 2, 4, 4, 4, 2, 2, 1, 2], Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  1, 1, 0, 1, 1, 1, 1, 1, 1, 1])\n\njulia> typeof(my_codon_dict)\ncodon_dict\n\njulia> fieldnames(codon_dict)\n(:codons, :AA, :AA_nostops, :uniqueAA, :uniqueAA_nostops, :uniqueI, :uniqueI_nostops, :deg, :deg_nostops, :stop_mask)\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.mcb","page":"Home","title":"CUBScout.mcb","text":"mcb(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nmcb(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate MCB from Urutia and Hurst, 2001.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = mcb(example_data_path); # Calculate measure on example dataset\n\njulia> result_300 = mcb(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> round.(result.self[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.087211\n 0.178337\n 0.189682\n 0.24012\n 0.149869\n\njulia> mcb(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> mcb(example_data_path, rm_start = true); # Remove start codons\n\njulia> mcb(example_data_path, dataframe = true); # Get output in dataframe format\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> mcb(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true); # Calculate using ribosomal genes as a reference subset\n\njulia> mcb(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true); # Calculate using all genes and ribosomal genes as a reference subset\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.melp","page":"Home","title":"CUBScout.melp","text":"melp(filepath::String, ref_vector::Vector{Bool}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nmelp(filepaths::Vector{String}, ref_vectors::Vector{Vector{Bool}}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate MELP from Supek and Vlahovicek, 2005.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nref_vector: reference subset, which is required for melp. Bool[] the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. If providing multiple filepaths and want custom reference sets, ref_vectors should be a vector of vectors corresponding to the vector of filepaths.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors. Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> result = melp(example_data_path, ribosomal_genes); # Calculate MELP on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.929414\n 1.007671\n 0.922357\n 0.951239\n 1.029531\n\njulia> melp(example_data_path, ribosomal_genes, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> melp(example_data_path, ribosomal_genes, rm_start = true); # Remove start codons\n\njulia> melp(example_data_path, ribosomal_genes, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.milc","page":"Home","title":"CUBScout.milc","text":"milc(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nmilc(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate MILC from Supek and Vlahovicek, 2005.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = milc(example_data_path); # Calculate measure on example dataset\n\njulia> result_300 = milc(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> round.(result.self[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.494826\n 0.583944\n 0.499472\n 0.635493\n 0.543935\n\njulia> milc(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> milc(example_data_path, rm_start = true); # Remove start codons\n\njulia> milc(example_data_path, dataframe = true); # Get output in dataframe format\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> milc(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true); # Calculate using ribosomal genes as a reference subset\n\njulia> milc(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true); # Calculate using all genes and ribosomal genes as a reference subset\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.scuo","page":"Home","title":"CUBScout.scuo","text":"scuo(filepath::String, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nscuo(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate SCUO from Wan et al., 2004. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = scuo(example_data_path); # Run SCUO on example dataset\n\njulia> round.(result[1:5], digits = 6)\n5-element Vector{Float64}:\n 0.143121\n 0.191237\n 0.096324\n 0.345211\n 0.105744\n\njulia> result_300 = scuo(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result)\n3801\n\njulia> length(result_300)\n1650\n\njulia> scuo(example_data_path, altstart_codon_dict); # Code TTG and CTG as methionine\n\njulia> scuo(example_data_path, rm_start = true); # Remove start codons\n\njulia> scuo(example_data_path, dataframe = true); # Get output in dataframe format\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.seq_descriptions-Tuple{AbstractString}","page":"Home","title":"CUBScout.seq_descriptions","text":"seq_descriptions(path::AbstractString)\n\nRead a fasta file at path and return the description fields. Just adds convenience on top of FASTX functions.\n\nExamples\n\njulia> seq_descr = seq_descriptions(example_data_path);\n\njulia> seq_descr[1]\n\"lcl|NC_000964.3_cds_NP_387882.1_1 [gene=dnaA] [locus_tag=BSU_00010] [db_xref=EnsemblGenomes-Gn:BSU00010,EnsemblGenomes-Tr:CAB11777,GOA:P05648,InterPro:IPR001957,InterPro:IPR003593,InterPro:IPR010921,InterPro:IPR013159,InterPro:IPR013317,InterPro:IPR018312,InterPro:IPR020591,InterPro:IPR024633,InterPro:IPR027417,PDB:4TPS,SubtiList:BG10065,UniProtKB/Swiss-Prot:P05648] [protein=chromosomal replication initiator informational ATPase] [protein_id=NP_387882.1] [location=410..1750] [gbkey=CDS]\"\n\n\n\n\n\n","category":"method"},{"location":"#CUBScout.seq_names-Tuple{AbstractString}","page":"Home","title":"CUBScout.seq_names","text":"seq_names(path::AbstractString)\n\nRead a fasta file at path and return the name fields. Just adds convenience on top of FASTX functions.\n\nExamples\n\njulia> seq_name_vector = seq_names(example_data_path);\n\njulia> seq_name_vector[1]\n\"lcl|NC_000964.3_cds_NP_387882.1_1\"\n\n\n\n\n\n","category":"method"}]
}

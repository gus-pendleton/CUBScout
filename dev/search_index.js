var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CUBScout","category":"page"},{"location":"#CUBScout","page":"Home","title":"CUBScout","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CUBScout.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CUBScout]","category":"page"},{"location":"#CUBScout.example_data_path","page":"Home","title":"CUBScout.example_data_path","text":"example_data_path\n\nThe path to an example dataset, stored as an artifact within the package. This is an .fna file containing coding sequences from Bacillus subtilis subsp. subtilis str. 168, NCBI Accession # NC_000964.3.\n\n\n\n\n\n","category":"constant"},{"location":"#CUBScout.codon_dict","page":"Home","title":"CUBScout.codon_dict","text":"codon_dict\n\nThe codon_dict type defines how codons are translated, and is essential for calculating codon usage bias as it identifies stop codons and each amino acid's degeneracy. A default codon dictionary is provided (default_codon_dict), or a user can make their own using the make_codon_dict function.\n\nFields\n\ncodons: the 64 codons, in alphabetical order\nAA: corresponding amino acid for each codon (64 entries long)\nAA_nostops: same as AA, but with stop codons removed\nuniqueAA: unique amino acid names including stop codons. Under a standard translation table, this is 21 amino acids long\nuniqueAA: same as uniqueAA, but with stop codons removed\nuniqueI: a vector of the same length as uniqueAA, containing vectors of the indices of each codon for that amino acid. For instance, the first entry corresponds to Lysine, and contains the vector [1, 3], corresponding to the positions of codons AAA and AAG in the codons field\nuniqueI_nostops: same as uniqueI, but with stop codons removed\ndeg: a vector of the same length as uniqueAA, containing the degeneracy for each amino acid.\ndeg_nostops: same as deg, but with stop codons removed\nstop_mask: a Boolean vector of length 64 which is false for stop codons. This is used to remove stop codons when calculating codon usage bias.\n\nNotes\n\nGenerally, CUBScout users shouldn't need to interact with the codon_dict type, as the standard genetic code is applied by default. Details for constructing a custom codon_dict are documented under the make_codon_dict function.\n\n\n\n\n\n","category":"type"},{"location":"#CUBScout.all_cub","page":"Home","title":"CUBScout.all_cub","text":"all_cub(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nall_cub(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate all codon usage bias measures at once. Because many measures require the same initial calculations, this is more efficient than calculating them individually.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.b","page":"Home","title":"CUBScout.b","text":"b(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nb(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate B from Karlin and Mrazek, 1996. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = b(example_data_path) # Run B on example dataset\n(self = [0.20912699220973896, 0.3289759448740455, 0.22365336363593893, 0.5391135258658497, 0.24919594143501034, 0.2880358413249049, 0.31200964304415874, 0.34858035204347476, 0.2455189361074733, 0.4690734561271221  …  0.3629137353834403, 0.3621330537227321, 0.4535285720373026, 0.3357858047622507, 0.28183191395624935, 0.2668809561422238, 0.22381338105820905, 0.4034837015709619, 0.3594626865160133, 0.3724863965444541],)\n\njulia> result_300 = b(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> b(example_data_path, altstart_codon_dict) # Use alternative start codons\n(self = [0.20897234061622738, 0.33515000264964157, 0.23659038285006437, 0.5444798345895256, 0.2510726777670733, 0.2931440715811394, 0.32097661134289895, 0.35705614480228676, 0.25452296343822073, 0.513313870450466  …  0.34414371567411556, 0.38229515825882665, 0.4592524704597901, 0.3399477982926337, 0.29297757306048133, 0.2680028918895221, 0.2168486105068708, 0.414543030746344, 0.3829702745346273, 0.39870546723886807],)\n\njulia> b(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ self      Identifier                         File                              \n      │ Float64   String                             String                            \n──────┼────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.209127  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.328976  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.223653  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.539114  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮                      ⋮                                  ⋮\n 3799 │ 0.403484  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.359463  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.372486  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                      3794 rows omitted\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> b(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true) # Calculate B using ribosomal genes as a reference subset\n3801×3 DataFrame\n  Row │ ribosomal  Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │  0.274331  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │  0.32069   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │  0.255325  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │  0.546493  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │  0.406673  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │  0.375857  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │  0.437981  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\njulia> b(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true) # Calculate B using all genes and ribosomal genes as a reference subset\n3801×4 DataFrame\n  Row │ self      ribosomal  Identifier                         File                              \n      │ Float64   Float64    String                             String                            \n──────┼───────────────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.209127   0.274331  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.328976   0.32069   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.223653   0.255325  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.539114   0.546493  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮          ⋮                      ⋮                                  ⋮\n 3799 │ 0.403484   0.406673  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.359463   0.375857  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.372486   0.437981  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                                 3794 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.enc","page":"Home","title":"CUBScout.enc","text":"enc(filepath::String, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nenc(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate ENC from Wright, 1990. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = enc(example_data_path) # Run ENC on example dataset\n3801-element Vector{Float64}:\n 56.787282202547104\n 52.725946690067296\n 59.287948966886226\n 52.29668642771212\n 55.26298060679466\n[...]\n\njulia> result_300 = enc(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result)\n3801\n\njulia> length(result_300)\n1650\n\njulia> enc(example_data_path, altstart_codon_dict) # Use alternative start codons\n3801-element Vector{Float64}:\n 57.001523875733255\n 52.86344589270121\n 59.5010825383314\n 52.24194738136219\n 55.24666826718284\n [...]\n\njulia> enc(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ ENC      Identifier                         File                              \n      │ Float64  String                             String                            \n──────┼───────────────────────────────────────────────────────────────────────────────\n    1 │ 56.7873  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 52.7259  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 59.2879  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 52.2967  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮                     ⋮                                  ⋮\n 3799 │ 55.2294  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 52.584   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 60.1928  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                     3794 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.enc_p","page":"Home","title":"CUBScout.enc_p","text":"enc_p(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nenc_p(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate ENC' from Novembre, 2002.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = enc_p(example_data_path) # Run ENC' on example dataset\n(self = [61.0, 59.36979815371983, 60.7494622549966, 61.0, 61.0, 56.353402323266224, 55.025304341802055, 57.30607996896261, 61.0, 49.80272180663614  …  58.275539315744126, 61.0, 58.28913535421893, 61.0, 61.0, 59.45750784609185, 61.0, 59.947884174402645, 59.43051836466144, 61.0],)\n\njulia> result_300 = enc_p(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> enc_p(example_data_path, altstart_codon_dict) # Use alternative start codons\n(self = [61.0, 59.25393167941246, 60.451328058538294, 61.0, 61.0, 56.577935943942954, 55.48412223261298, 57.35814028261265, 61.0, 48.78039661159036  …  58.93889392717741, 61.0, 59.1935848198233, 61.0, 61.0, 59.587859071790746, 61.0, 58.81213890142517, 59.40548501932952, 61.0],)\n\njulia> enc_p(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ self     Identifier                         File                              \n      │ Float64  String                             String                            \n──────┼───────────────────────────────────────────────────────────────────────────────\n    1 │ 61.0     lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 59.3698  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 60.7495  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 61.0     lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮                     ⋮                                  ⋮\n 3799 │ 59.9479  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 59.4305  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 61.0     lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                     3794 rows omitted\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> enc_p(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true) # Calculate ENC' using ribosomal genes as a reference subset\n3801×3 DataFrame\n  Row │ ribosomal  Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │   61.0     lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │   58.8882  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │   56.4104  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │   61.0     lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │   56.5325  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │   55.6687  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │   61.0     lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\njulia> enc_p(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true) # Calculate ENC' using all genes and ribosomal genes as a reference subset\n3801×4 DataFrame\n  Row │ self     ribosomal  Identifier                         File                              \n      │ Float64  Float64    String                             String                            \n──────┼──────────────────────────────────────────────────────────────────────────────────────────\n    1 │ 61.0       61.0     lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 59.3698    58.8882  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 60.7495    56.4104  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 61.0       61.0     lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮         ⋮                      ⋮                                  ⋮\n 3799 │ 59.9479    56.5325  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 59.4305    55.6687  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 61.0       61.0     lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                                3794 rows omitted\n                                                                       \n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.find_seqs-Tuple{AbstractString, Regex}","page":"Home","title":"CUBScout.find_seqs","text":"find_seqs(path::AbstractString, match_pattern::Regex)\n\nRead a fasta file at path and query the description field for a given Regex match_pattern. These results can be supplied in either the reference tuples (for codon usage bias functions) or reference vectors (for expressivity measures).\n\nExamples\n\njldoctest julia> find_seqs(example_data_path, r\"ribosomal\") 4237-element Vector{Bool}:  0  0  0  0  0  0  ⋮  0  0  0  0  1\n\n\n\n\n\n","category":"method"},{"location":"#CUBScout.make_codon_dict","page":"Home","title":"CUBScout.make_codon_dict","text":"make_codon_dict(filepath::AbstractString, delimiter::AbstractChar = '\t')\n\nMake a custom codon dictionary for organisms with non-standard genetic code. filepath points to a delimited file with two columns and no header. the first column should be codons, and the second column their corresponding amino acid. Avoid spaces and special characters (e.g., write GlutamicAcid instead of Glutamic Acid). Stop codons can be coded as Stop, stop, STOP, or *. If delimited using any character outside of tab, supply the delimiter as the second argument as Char, not a string (e.g. ',' not \",\"). make_codon_dict uses readdlm from DelimitedFiles; it's a good idea to check whether readdlm parses your file correctly before passing to make_codon_dict\n\nExamples\n\njulia> my_codon_dict = make_codon_dict(CUBScout.codon_dict_path)\ncodon_dict(BioSequences.LongSequence{BioSequences.DNAAlphabet{2}}[AAA, AAC, AAG, AAT, ACA, ACC, ACG, ACT, AGA, AGC  …  TCG, TCT, TGA, TGC, TGG, TGT, TTA, TTC, TTG, TTT], [\"Lysine\", \"Asparagine\", \"Lysine\", \"Asparagine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Arginine\", \"Serine\"  …  \"Serine\", \"Serine\", \"Stop\", \"Cysteine\", \"Tryptophan\", \"Cysteine\", \"Leucine\", \"Phenylalanine\", \"Leucine\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Lysine\", \"Asparagine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Threonine\", \"Arginine\", \"Serine\"  …  \"Serine\", \"Serine\", \"Serine\", \"Cysteine\", \"Tryptophan\", \"Cysteine\", \"Leucine\", \"Phenylalanine\", \"Leucine\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Threonine\", \"Arginine\", \"Serine\", \"Isoleucine\", \"Methionine\", \"Glutamine\", \"Histidine\", \"Proline\"  …  \"Glutamicacid\", \"Asparticacid\", \"Alanine\", \"Glycine\", \"Valine\", \"Stop\", \"Tyrosine\", \"Cysteine\", \"Tryptophan\", \"Phenylalanine\"], [\"Lysine\", \"Asparagine\", \"Threonine\", \"Arginine\", \"Serine\", \"Isoleucine\", \"Methionine\", \"Glutamine\", \"Histidine\", \"Proline\", \"Leucine\", \"Glutamicacid\", \"Asparticacid\", \"Alanine\", \"Glycine\", \"Valine\", \"Tyrosine\", \"Cysteine\", \"Tryptophan\", \"Phenylalanine\"], Vector{Int32}[[1, 3], [2, 4], [5, 6, 7, 8], [9, 11, 25, 26, 27, 28], [10, 12, 53, 54, 55, 56], [13, 14, 16], [15], [17, 19], [18, 20], [21, 22, 23, 24]  …  [33, 35], [34, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 51, 57], [50, 52], [58, 60], [59], [62, 64]], Vector{Int32}[[1, 3], [2, 4], [5, 6, 7, 8], [9, 11, 25, 26, 27, 28], [10, 12, 51, 52, 53, 54], [13, 14, 16], [15], [17, 19], [18, 20], [21, 22, 23, 24], [29, 30, 31, 32, 58, 60], [33, 35], [34, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50], [55, 57], [56], [59, 61]], Int32[2, 2, 4, 6, 6, 3, 1, 2, 2, 4  …  2, 2, 4, 4, 4, 3, 2, 2, 1, 2], Int32[2, 2, 4, 6, 6, 3, 1, 2, 2, 4, 6, 2, 2, 4, 4, 4, 2, 2, 1, 2], Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  1, 1, 0, 1, 1, 1, 1, 1, 1, 1])\n\njulia> typeof(my_codon_dict)\ncodon_dict\n\njulia> fieldnames(codon_dict)\n(:codons, :AA, :AA_nostops, :uniqueAA, :uniqueAA_nostops, :uniqueI, :uniqueI_nostops, :deg, :deg_nostops, :stop_mask)\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.mcb","page":"Home","title":"CUBScout.mcb","text":"mcb(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nmcb(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate MCB from Urutia and Hurst, 2001.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = mcb(example_data_path) # Run MCB on example dataset\n(self = [0.08721123763355611, 0.17833660522736233, 0.18968222510423902, 0.2401197552240717, 0.14986851474968427, 0.2726565434395838, 0.2463076527192269, 0.21311734597718654, 0.12911296594333618, 0.33880929702119683  …  0.20493351356705938, 0.1315657625271143, 0.218615505877176, 0.1589526915862505, 0.11884772940321076, 0.16599279317487328, 0.09899721758865292, 0.20119392008973744, 0.2227777749890099, 0.14183390310488245],)\n\njulia> result_300 = mcb(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> mcb(example_data_path, altstart_codon_dict) # Use alternative start codons\n(self = [0.08395614019755322, 0.17886564496310903, 0.1843882189861458, 0.2327059977332034, 0.14375956626276776, 0.26153451676836, 0.2277560915069008, 0.2084721025526067, 0.12748812450452368, 0.35284946520551547  …  0.19412496858111208, 0.15378185701040462, 0.22664543233169301, 0.1572460068164919, 0.12228357240597998, 0.16482459147152181, 0.09433344489896123, 0.2180785328818952, 0.22046000262742788, 0.14934890119286454],)\n\njulia> mcb(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ self       Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.0872112  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.178337   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.189682   lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.24012    lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │ 0.201194   lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.222778   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.141834   lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> mcb(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true) # Calculate MCB using ribosomal genes as a reference subset\n3801×3 DataFrame\n  Row │ ribosomal  Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.142922   lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.179081   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.306192   lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.296251   lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │ 0.239881   lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.260092   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.197456   lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\njulia> mcb(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true) # Calculate MCB using all genes and ribosomal genes as a reference subset\n3801×4 DataFrame\n  Row │ self       ribosomal  Identifier                         File                              \n      │ Float64    Float64    String                             String                            \n──────┼────────────────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.0872112  0.142922   lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.178337   0.179081   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.189682   0.306192   lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.24012    0.296251   lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮          ⋮                      ⋮                                  ⋮\n 3799 │ 0.201194   0.239881   lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.222778   0.260092   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.141834   0.197456   lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                                  3794 rows omitted\n\njulia> mcb(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true) # Calculate MCB using all genes and ribosomal genes as a reference subset\n3801×4 DataFrame\n  Row │ self       ribosomal  Identifier                         File                              \n      │ Float64    Float64    String                             String                            \n──────┼────────────────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.0872112  0.142922   lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.178337   0.179081   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.189682   0.306192   lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.24012    0.296251   lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮          ⋮                      ⋮                                  ⋮\n 3799 │ 0.201194   0.239881   lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.222778   0.260092   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.141834   0.197456   lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                                  3794 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.milc","page":"Home","title":"CUBScout.milc","text":"milc(filepath::String, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nmilc(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; ref_seqs = (), rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate MILC from Super and Vlahovicek, 2005.\n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nref_seqs: by default, codon usage bias for each gene is calculated using the whole genome (\"self\") as a reference subset. If you would like to specify your own subsets to calculate against, such as ribosomal genes, ref_seqs takes a named tuple in the form (\"subset_name\" = Bool[],), where Bool[] is the same length as the number of sequences in your fasta file, and contains true for sequences you want as your reference subset and false for those you don't. You can use find_seqs() to generate this vector. You can provide multiple reference subsets as separate entries in the named tuple, and CUBScout will return the calculated measure using each subset. If providing multiple filepaths and want custom reference sets, ref_seqs should be a vector of named tuples corresponding to the vector of filepaths.\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = milc(example_data_path) # Run MCB on example dataset\n(self = [0.49482573202153163, 0.5839439121281993, 0.49947166558087047, 0.6354929447434434, 0.5439352548027006, 0.6104721251245075, 0.6256398806438782, 0.6228376952086359, 0.5355298113407091, 0.7832276821181443  …  0.5968814155010973, 0.5964500002803941, 0.5930680822246766, 0.5412999510428169, 0.49866919389111675, 0.5830959504630727, 0.5139438478694085, 0.6164434557282711, 0.6018041071661588, 0.48775477465069617],)\n\njulia> result_300 = milc(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result.self)\n3801\n\njulia> length(result_300.self)\n1650\n\njulia> milc(example_data_path, altstart_codon_dict) # Use alternative start codons\n(self = [0.49430677065204015, 0.5885230358759501, 0.5025039496927455, 0.6371410353128949, 0.5426521549091665, 0.6108102890984481, 0.6217053122088902, 0.6248550493920512, 0.5375433930570145, 0.822162494240932  …  0.5865793308679926, 0.6188550398687176, 0.5942360103321869, 0.5420673855853781, 0.5054979526357374, 0.5824007342085071, 0.5121161561615022, 0.6308328736610525, 0.6146790189624615, 0.5061508729549385],)\n\njulia> milc(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ self      Identifier                         File                              \n      │ Float64   String                             String                            \n──────┼────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.494826  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.583944  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.499472  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.635493  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮                      ⋮                                  ⋮\n 3799 │ 0.616443  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.601804  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.487755  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                      3794 rows omitted\n\n\njulia> all_genes = find_seqs(example_data_path, r\"\"); # Get a vector which is true for all genes\n\njulia> ribosomal_genes = find_seqs(example_data_path, r\"ribosomal\"); # Get a vector which is true for ribosomal genes\n\njulia> milc(example_data_path, ref_seqs = (ribosomal = ribosomal_genes,), dataframe = true) # Calculate MILC using ribosomal genes as a reference subset\n3801×3 DataFrame\n  Row │ ribosomal  Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │  0.532406  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │  0.579498  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │  0.541516  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │  0.668068  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │  0.636678  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │  0.623519  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │  0.551733  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\njulia> milc(example_data_path, ref_seqs = (self = all_genes, ribosomal = ribosomal_genes,), dataframe = true) # Calculate MILC using all genes and ribosomal genes as a reference subset\n3801×4 DataFrame\n  Row │ self      ribosomal  Identifier                         File                              \n      │ Float64   Float64    String                             String                            \n──────┼───────────────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.494826   0.532406  lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.583944   0.579498  lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.499472   0.541516  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.635493   0.668068  lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │    ⋮          ⋮                      ⋮                                  ⋮\n 3799 │ 0.616443   0.636678  lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.601804   0.623519  lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.487755   0.551733  lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                                 3794 rows omitted\n\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.scuo","page":"Home","title":"CUBScout.scuo","text":"scuo(filepath::String, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\nscuo(filepaths::Vector{String}, dict::codon_dict = default_codon_dict; rm_start = false, rm_stop = false, threshold = 80, dataframe = false)\n\nCalculate SCUO from Wan et al., 2004. \n\nArguments\n\nfilepath: path to fasta file of coding sequences (e.g. .fasta, .fna, .fa). There are no quality checks, so it's assumed that each entry is assumed to be an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\nfilepaths: vector of paths to fasta files of coding sequences (e.g. .fasta, .fna, .fa). CUBScout is multithreaded; if there are multiple threads available, CUBScout will allocate a thread for each filepath. As such, providing a vector of paths as an argument will be faster than broadcasting across a vector of paths. Because a single file is only accessed by a single thread, it's never worth using more threads than the total number of files being analyzed. There are no quality checks, so it's assumed that each entry is an individual coding sequence, in the correct frame, without 5' or 3' untranslated regions.\ndict: codon dictionary of type codon_dict. The standard genetic code is loaded by default, but if necessary you can create your own codon dictionary using make_codon_dict\nrm_start: whether to ignore the first codon of each sequence. Many organisms use alternative start codons such as TTG and CTG, which in other locations would generally code for leucine. There are a few approaches to deal with this. By default, CUBScout keeps each start codon and assigns it as though it were any other codon. Of course, this would slightly change leucine's contribution to codon usage bias. If you set rm_start to true, the first codon of every sequence is simply discarded. This will also affect the gene's length, which means it could be removed if it falls under the threshold. Other CUB packages (such as R's coRdon, alt.init = TRUE), assign all TTG and CTG codons to methionine, regardless of their location. I disagree with this approach from a biological perspective; those codons still code for leucine most of the time they are used. However, if you want matching output as you would get from coRdon, you can supply altstart_codon_dict to the dict argument, and keep rm_start as false.\nrm_stop: whether to remove stop codons from calculations of codon usage bias.\nthreshold: minimum length of a gene (in codons) to be used in codon usage bias calculations. By default this is set to 80 codons; any genes less than or equal to that length are discarded. If you want no genes discarded, set threshold to 0.\ndataframe: whether to format output as a dataframe. By default results are returned as vectors or named tuples (if the measure uses reference subsets). Setting dataframe = true will instead output a dataframe, though at a slight performance cost.\n\nExamples\n\njulia> result = scuo(example_data_path) # Run SCUO on example dataset\n3801-element Vector{Float64}:\n 0.14312092935182216\n 0.19123738759808445\n 0.09632387849329298\n 0.34521070127179804\n 0.1057438762588421\n 0.12037900551695478\n[...]\n\njulia> result_300 = scuo(example_data_path, threshold = 300); # Increase threshold length\n\njulia> length(result)\n3801\n\njulia> length(result_300)\n1650\n\njulia> scuo(example_data_path, altstart_codon_dict) # Use alternative start codons\n3801-element Vector{Float64}:\n 0.14286111587263958\n 0.19315278493814017\n 0.0966128845976179\n 0.3473543659821751\n 0.10792236840320082\n 0.12039525638448735\n [...]\n\njulia> scuo(example_data_path, dataframe = true) # Get output in dataframe format\n3801×3 DataFrame\n  Row │ SCUO       Identifier                         File                              \n      │ Float64    String                             String                            \n──────┼─────────────────────────────────────────────────────────────────────────────────\n    1 │ 0.143121   lcl|NC_000964.3_cds_NP_387882.1_1  /Users/augustuspendleton/.julia/…\n    2 │ 0.191237   lcl|NC_000964.3_cds_NP_387883.1_2  /Users/augustuspendleton/.julia/…\n    3 │ 0.0963239  lcl|NC_000964.3_cds_NP_387885.1_4  /Users/augustuspendleton/.julia/…\n    4 │ 0.345211   lcl|NC_000964.3_cds_NP_387886.2_5  /Users/augustuspendleton/.julia/…\n  ⋮   │     ⋮                      ⋮                                  ⋮\n 3799 │ 0.18407    lcl|NC_000964.3_cds_NP_391983.1_…  /Users/augustuspendleton/.julia/…\n 3800 │ 0.156161   lcl|NC_000964.3_cds_NP_391984.1_…  /Users/augustuspendleton/.julia/…\n 3801 │ 0.235914   lcl|NC_000964.3_cds_NP_391985.1_…  /Users/augustuspendleton/.julia/…\n                                                                       3794 rows omitted\n\n\n\n\n\n\n","category":"function"},{"location":"#CUBScout.seq_descriptions-Tuple{AbstractString}","page":"Home","title":"CUBScout.seq_descriptions","text":"seq_descriptions(path::AbstractString)\n\nRead a fasta file at path and return the description fields. Just adds convenience on top of FASTX functions.\n\nExamples\n\njulia> seq_descr = seq_descriptions(example_data_path)\n4237-element Vector{String}:\n \"lcl|NC_000964.3_cds_NP_387882.1\" ⋯ 430 bytes ⋯ \"ocation=410..1750] [gbkey=CDS]\"\n \"lcl|NC_000964.3_cds_NP_387883.1\" ⋯ 315 bytes ⋯ \"cation=1939..3075] [gbkey=CDS]\"\n \"lcl|NC_000964.3_cds_NP_387884.1\" ⋯ 305 bytes ⋯ \"cation=3206..3421] [gbkey=CDS]\"\n \"lcl|NC_000964.3_cds_NP_387885.1\" ⋯ 350 bytes ⋯ \"cation=3437..4549] [gbkey=CDS]\"\n \"lcl|NC_000964.3_cds_NP_387886.2\" ⋯ 248 bytes ⋯ \"cation=4567..4812] [gbkey=CDS]\"\n \"lcl|NC_000964.3_cds_NP_387887.1\" ⋯ 466 bytes ⋯ \"cation=4867..6783] [gbkey=CDS]\"\n[...]\n\njulia> seq_descr[1]\n\"lcl|NC_000964.3_cds_NP_387882.1_1 [gene=dnaA] [locus_tag=BSU_00010] [db_xref=EnsemblGenomes-Gn:BSU00010,EnsemblGenomes-Tr:CAB11777,GOA:P05648,InterPro:IPR001957,InterPro:IPR003593,InterPro:IPR010921,InterPro:IPR013159,InterPro:IPR013317,InterPro:IPR018312,InterPro:IPR020591,InterPro:IPR024633,InterPro:IPR027417,PDB:4TPS,SubtiList:BG10065,UniProtKB/Swiss-Prot:P05648] [protein=chromosomal replication initiator informational ATPase] [protein_id=NP_387882.1] [location=410..1750] [gbkey=CDS]\"\n\n\n\n\n\n","category":"method"},{"location":"#CUBScout.seq_names-Tuple{AbstractString}","page":"Home","title":"CUBScout.seq_names","text":"seq_names(path::AbstractString)\n\nRead a fasta file at path and return the name fields. Just adds convenience on top of FASTX functions.\n\nExamples\n\njulia> seq_names(example_data_path)\n4237-element Vector{String}:\n \"lcl|NC_000964.3_cds_NP_387882.1_1\"\n \"lcl|NC_000964.3_cds_NP_387883.1_2\"\n \"lcl|NC_000964.3_cds_NP_387884.1_3\"\n \"lcl|NC_000964.3_cds_NP_387885.1_4\"\n \"lcl|NC_000964.3_cds_NP_387886.2_5\"\n \"lcl|NC_000964.3_cds_NP_387887.1_6\"\n[...]\n\n\n\n\n\n","category":"method"}]
}
